name: CI Pipeline

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.3
          terraform_wrapper: false
        
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Check Version
        run: |
          oldVersion=$(git describe origin/main --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          newVersion=$(<version)

          oldVersionNumeric=$(echo "$oldVersion" | awk -F. '{ printf("%03d%03d%03d", $1,$2,$3); }')
          newVersionNumeric=$(echo "$newVersion" | awk -F. '{ printf("%03d%03d%03d", $1,$2,$3); }')
          if [[ "$newVersionNumeric" -le "$oldVersionNumeric" ]]; then
            echo "Error: Version in the version file must be incremented."
            exit 1
          fi

          echo "Version check succeeded. Old version: $oldVersion, new version: $newVersion"

      - name: Terraform Validate
        run: |
          terraform init -backend=false
          terraform validate
        working-directory: infrastructure

      - name: Run Integration Tests
        run: |
          terraform init -backend=false
          terraform test
        working-directory: tests/integration-tests

      - name: Run End to End Tests
        run: |
          go mod tidy
          go test -v -timeout 60m
        working-directory: tests/end-to-end-tests
        env:
          GOMAXPROCS: 8
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_STATE_RESOURCE_GROUP: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
          TF_STATE_STORAGE_ACCOUNT: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
          TF_STATE_STORAGE_CONTAINER: ${{ secrets.TF_STATE_STORAGE_CONTAINER }}

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.3

      - name: Run Terraform Format
        run: terraform fmt -check
        working-directory: infrastructure

      - name: Run Terraform Lint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest
      - run: tflint

      - name: Install Checkov
        run: sudo apt-get update && sudo apt-get install -y python3-pip && pip3 install checkov

      - name: Run Checkov Scan
        run: checkov --directory infrastructure --skip-path example --list

      - name: Install GitLeaks
        run: |
          curl -sSL https://github.com/zricethezav/gitleaks/releases/download/v8.2.4/gitleaks_8.2.4_linux_x64.tar.gz | tar -xz
          sudo mv gitleaks /usr/local/bin/

      - name: Run GitLeaks Scan
        run: gitleaks detect --source . --config .gitleaks.toml

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: trivy filesystem --security-checks vuln,config --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed .

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-verification, static-code-analysis]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Tag Repository
        id: tag_repository
        run: |
          newVersion=$(<version)
          tag="v$newVersion"
          git tag "$tag"
          git push origin "$tag"
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_repository.outputs.tag }}
          release_name: ${{ steps.tag_repository.outputs.tag }}
          body: "Automatic release for version ${{ steps.tag_repository.outputs.tag }}"
          draft: false
          prerelease: false
